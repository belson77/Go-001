// Code generated by protoc-gen-go-http. DO NOT EDIT.

package news_api_comment_appcomment_v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type AppCommentHTTPServer interface {
	Query(context.Context, *QueryRequest) (*QueryResponse, error)

	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
}

func RegisterAppCommentHTTPServer(s http1.ServiceRegistrar, srv AppCommentHTTPServer) {
	s.RegisterService(&_HTTP_AppComment_serviceDesc, srv)
}

func _HTTP_AppComment_Submit_0(srv interface{}, ctx context.Context, dec func(interface{}) error, req *http.Request) (interface{}, error) {
	var in SubmitRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(AppCommentServer).Submit(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_AppComment_Query_0(srv interface{}, ctx context.Context, dec func(interface{}) error, req *http.Request) (interface{}, error) {
	var in QueryRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(AppCommentServer).Query(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_AppComment_serviceDesc = http1.ServiceDesc{
	ServiceName: "news.api.comment.appcomment.v1.AppComment",
	HandlerType: (*AppCommentHTTPServer)(nil),
	Methods: []http1.MethodDesc{

		{
			Path:    "/v1/comment/submit",
			Method:  "POST",
			Handler: _HTTP_AppComment_Submit_0,
		},

		{
			Path:    "/v1/comment",
			Method:  "GET",
			Handler: _HTTP_AppComment_Query_0,
		},
	},
	Metadata: "api.proto",
}
